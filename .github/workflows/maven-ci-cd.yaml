name: Maven CI/CD Pipeline

on:
  workflow_dispatch:

env:
  MAVEN_OPTS: -Dfile.encoding=UTF-8

jobs:
  # Build and Test Job
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        java-version: [8, 11, 17, 21]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ matrix.java-version }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java-version }}
        distribution: 'temurin'
        cache: 'maven'
        
    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Validate POM
      run: mvn validate
      
    - name: Compile
      run: mvn compile
      
    - name: Run tests
      run: mvn test
      
    - name: Run integration tests
      run: mvn verify -DskipUnitTests
      
    - name: Build JAR
      run: mvn package -DskipTests
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.java-version }}
        path: target/surefire-reports/
        retention-days: 30
        
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-reports-${{ matrix.java-version }}
        path: target/site/jacoco/
        retention-days: 30

  # Code Quality Job
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: 17
        distribution: 'temurin'
        cache: 'maven'
        
    - name: Run SonarQube analysis
      run: |
        mvn clean verify sonar:sonar \
          -Dsonar.projectKey=your-project-key \
          -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
          -Dsonar.login=${{ secrets.SONAR_TOKEN }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Run SpotBugs
      run: mvn spotbugs:check
      
    - name: Run Checkstyle
      run: mvn checkstyle:check

  # Security Scan Job
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: 17
        distribution: 'temurin'
        cache: 'maven'
        
    - name: Run OWASP Dependency Check
      run: mvn org.owasp:dependency-check-maven:check
      
    - name: Upload security report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-report
        path: target/dependency-check-report.html
        retention-days: 90

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-test, code-quality, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: 17
        distribution: 'temurin'
        cache: 'maven'
        
    - name: Build for staging
      run: mvn clean package -DskipTests -Pstaging
      
    - name: Deploy to staging environment
      run: |
        # Add your deployment commands here
        echo "Deploying to staging environment"
        # Example: scp target/*.jar user@staging-server:/app/
        # Example: docker build -t your-app:staging .
        # Example: docker push your-registry/your-app:staging
      env:
        STAGING_HOST: ${{ secrets.STAGING_HOST }}
        STAGING_USER: ${{ secrets.STAGING_USER }}
        STAGING_KEY: ${{ secrets.STAGING_KEY }}

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-test, code-quality, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: 17
        distribution: 'temurin'
        cache: 'maven'
        
    - name: Build for production
      run: mvn clean package -DskipTests -Pproduction
      
    - name: Create release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        draft: false
        prerelease: false
        
    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./target/*.jar
        asset_name: application.jar
        asset_content_type: application/java-archive
        
    - name: Deploy to production environment
      run: |
        # Add your deployment commands here
        echo "Deploying to production environment"
        # Example: scp target/*.jar user@prod-server:/app/
        # Example: docker build -t your-app:latest .
        # Example: docker push your-registry/your-app:latest
      env:
        PROD_HOST: ${{ secrets.PROD_HOST }}
        PROD_USER: ${{ secrets.PROD_USER }}
        PROD_KEY: ${{ secrets.PROD_KEY }} 