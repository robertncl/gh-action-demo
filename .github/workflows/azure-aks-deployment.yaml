name: Azure AKS Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      image_tag:
        description: 'Docker image tag'
        required: false
        default: 'latest'
        type: string
      namespace:
        description: 'Kubernetes namespace'
        required: false
        default: 'default'
        type: string

env:
  REGISTRY_NAME: ${{ secrets.AZURE_REGISTRY_NAME }}
  IMAGE_NAME: ${{ secrets.IMAGE_NAME || 'myapp' }}
  AKS_CLUSTER_NAME: ${{ secrets.AKS_CLUSTER_NAME }}
  AKS_RESOURCE_GROUP: ${{ secrets.AKS_RESOURCE_GROUP }}

jobs:
  # Build and Push Docker Image
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Log in to Azure Container Registry
      run: |
        az acr login --name ${{ env.REGISTRY_NAME }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=${{ github.event.inputs.image_tag }}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
        
    - name: Upload Docker image info
      uses: actions/upload-artifact@v4
      with:
        name: docker-image-info
        path: |
          ${{ steps.meta.outputs.tags }}
        retention-days: 30

  # Deploy to Staging Environment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event.inputs.environment == 'staging' || github.event.inputs.environment == 'both'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Log in to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Get AKS credentials
      run: |
        az aks get-credentials \
          --resource-group ${{ env.AKS_RESOURCE_GROUP }} \
          --name ${{ env.AKS_CLUSTER_NAME }} \
          --overwrite-existing
          
    - name: Create namespace if not exists
      run: |
        kubectl create namespace ${{ github.event.inputs.namespace }} --dry-run=client -o yaml | kubectl apply -f -
        
    - name: Deploy to staging
      run: |
        # Update image tag in deployment files
        sed -i "s|IMAGE_TAG|${{ needs.build-and-push.outputs.image_tag }}|g" k8s/staging/*.yaml
        
        # Apply Kubernetes manifests
        kubectl apply -f k8s/staging/ -n ${{ github.event.inputs.namespace }}
        
        # Wait for deployment to be ready
        kubectl rollout status deployment/${{ env.IMAGE_NAME }} -n ${{ github.event.inputs.namespace }} --timeout=300s
        
    - name: Verify deployment
      run: |
        # Check if pods are running
        kubectl get pods -n ${{ github.event.inputs.namespace }} -l app=${{ env.IMAGE_NAME }}
        
        # Check service endpoints
        kubectl get svc -n ${{ github.event.inputs.namespace }} -l app=${{ env.IMAGE_NAME }}
        
    - name: Run smoke tests
      run: |
        # Get service URL
        SERVICE_URL=$(kubectl get svc -n ${{ github.event.inputs.namespace }} -l app=${{ env.IMAGE_NAME }} -o jsonpath='{.items[0].status.loadBalancer.ingress[0].ip}')
        
        # Run basic health check
        curl -f http://$SERVICE_URL/health || exit 1

  # Deploy to Production Environment
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event.inputs.environment == 'production' || github.event.inputs.environment == 'both'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Log in to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Get AKS credentials
      run: |
        az aks get-credentials \
          --resource-group ${{ env.AKS_RESOURCE_GROUP }} \
          --name ${{ env.AKS_CLUSTER_NAME }} \
          --overwrite-existing
          
    - name: Create namespace if not exists
      run: |
        kubectl create namespace ${{ github.event.inputs.namespace }} --dry-run=client -o yaml | kubectl apply -f -
        
    - name: Deploy to production
      run: |
        # Update image tag in deployment files
        sed -i "s|IMAGE_TAG|${{ needs.build-and-push.outputs.image_tag }}|g" k8s/production/*.yaml
        
        # Apply Kubernetes manifests
        kubectl apply -f k8s/production/ -n ${{ github.event.inputs.namespace }}
        
        # Wait for deployment to be ready
        kubectl rollout status deployment/${{ env.IMAGE_NAME }} -n ${{ github.event.inputs.namespace }} --timeout=300s
        
    - name: Verify deployment
      run: |
        # Check if pods are running
        kubectl get pods -n ${{ github.event.inputs.namespace }} -l app=${{ env.IMAGE_NAME }}
        
        # Check service endpoints
        kubectl get svc -n ${{ github.event.inputs.namespace }} -l app=${{ env.IMAGE_NAME }}
        
    - name: Run smoke tests
      run: |
        # Get service URL
        SERVICE_URL=$(kubectl get svc -n ${{ github.event.inputs.namespace }} -l app=${{ env.IMAGE_NAME }} -o jsonpath='{.items[0].status.loadBalancer.ingress[0].ip}')
        
        # Run basic health check
        curl -f http://$SERVICE_URL/health || exit 1

  # Blue-Green Deployment (Production only)
  blue-green-deployment:
    name: Blue-Green Deployment
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-production]
    if: github.event.inputs.environment == 'production' && github.event.inputs.deployment_strategy == 'blue-green'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Log in to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Get AKS credentials
      run: |
        az aks get-credentials \
          --resource-group ${{ env.AKS_RESOURCE_GROUP }} \
          --name ${{ env.AKS_CLUSTER_NAME }} \
          --overwrite-existing
          
    - name: Determine current and new versions
      id: versions
      run: |
        # Get current version
        CURRENT_VERSION=$(kubectl get deployment ${{ env.IMAGE_NAME }} -n ${{ github.event.inputs.namespace }} -o jsonpath='{.spec.template.spec.containers[0].image}' | cut -d: -f2)
        echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        
        # New version is the image tag
        NEW_VERSION="${{ needs.build-and-push.outputs.image_tag }}"
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        
        echo "Current version: $CURRENT_VERSION"
        echo "New version: $NEW_VERSION"
        
    - name: Deploy new version (Green)
      run: |
        # Create new deployment with new image
        kubectl set image deployment/${{ env.IMAGE_NAME }}-green ${{ env.IMAGE_NAME }}=${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ steps.versions.outputs.new_version }} -n ${{ github.event.inputs.namespace }}
        
        # Wait for green deployment to be ready
        kubectl rollout status deployment/${{ env.IMAGE_NAME }}-green -n ${{ github.event.inputs.namespace }} --timeout=300s
        
    - name: Switch traffic to new version
      run: |
        # Update service to point to green deployment
        kubectl patch svc ${{ env.IMAGE_NAME }}-service -n ${{ github.event.inputs.namespace }} -p '{"spec":{"selector":{"app":"${{ env.IMAGE_NAME }}-green"}}}'
        
    - name: Verify new deployment
      run: |
        # Run health checks on new deployment
        SERVICE_URL=$(kubectl get svc -n ${{ github.event.inputs.namespace }} -l app=${{ env.IMAGE_NAME }}-green -o jsonpath='{.items[0].status.loadBalancer.ingress[0].ip}')
        curl -f http://$SERVICE_URL/health || exit 1
        
    - name: Rollback if needed
      if: failure()
      run: |
        # Switch back to blue deployment
        kubectl patch svc ${{ env.IMAGE_NAME }}-service -n ${{ github.event.inputs.namespace }} -p '{"spec":{"selector":{"app":"${{ env.IMAGE_NAME }}-blue"}}}'
        echo "Rolled back to previous version"

  # Canary Deployment (Production only)
  canary-deployment:
    name: Canary Deployment
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-production]
    if: github.event.inputs.environment == 'production' && github.event.inputs.deployment_strategy == 'canary'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Log in to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Get AKS credentials
      run: |
        az aks get-credentials \
          --resource-group ${{ env.AKS_RESOURCE_GROUP }} \
          --name ${{ env.AKS_CLUSTER_NAME }} \
          --overwrite-existing
          
    - name: Deploy canary (10% traffic)
      run: |
        # Create canary deployment
        kubectl apply -f k8s/canary/ -n ${{ github.event.inputs.namespace }}
        
        # Update canary deployment with new image
        kubectl set image deployment/${{ env.IMAGE_NAME }}-canary ${{ env.IMAGE_NAME }}=${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ needs.build-and-push.outputs.image_tag }} -n ${{ github.event.inputs.namespace }}
        
        # Wait for canary to be ready
        kubectl rollout status deployment/${{ env.IMAGE_NAME }}-canary -n ${{ github.event.inputs.namespace }} --timeout=300s
        
    - name: Monitor canary performance
      run: |
        # Monitor canary for 5 minutes
        echo "Monitoring canary deployment for 5 minutes..."
        sleep 300
        
        # Check canary metrics
        kubectl top pods -n ${{ github.event.inputs.namespace }} -l app=${{ env.IMAGE_NAME }}-canary
        
    - name: Promote canary to full deployment
      run: |
        # Scale up main deployment
        kubectl scale deployment ${{ env.IMAGE_NAME }} --replicas=9 -n ${{ github.event.inputs.namespace }}
        
        # Scale down canary
        kubectl scale deployment ${{ env.IMAGE_NAME }}-canary --replicas=0 -n ${{ github.event.inputs.namespace }}
        
        # Update main deployment with new image
        kubectl set image deployment/${{ env.IMAGE_NAME }} ${{ env.IMAGE_NAME }}=${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ needs.build-and-push.outputs.image_tag }} -n ${{ github.event.inputs.namespace }}

  # Infrastructure as Code (Terraform)
  terraform-deploy:
    name: Terraform Infrastructure
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event.inputs.deploy_infrastructure == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: '1.5.0'
        
    - name: Log in to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Terraform Init
      run: |
        cd terraform
        terraform init
        
    - name: Terraform Plan
      run: |
        cd terraform
        terraform plan -out=tfplan
        
    - name: Terraform Apply
      run: |
        cd terraform
        terraform apply -auto-approve tfplan
        
    - name: Upload Terraform state
      uses: actions/upload-artifact@v4
      with:
        name: terraform-state
        path: terraform/terraform.tfstate
        retention-days: 30

  # Monitoring and Alerting
  monitoring-setup:
    name: Setup Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Log in to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Get AKS credentials
      run: |
        az aks get-credentials \
          --resource-group ${{ env.AKS_RESOURCE_GROUP }} \
          --name ${{ env.AKS_CLUSTER_NAME }} \
          --overwrite-existing
          
    - name: Deploy Prometheus
      run: |
        # Install Prometheus using Helm
        helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
        helm repo update
        helm install prometheus prometheus-community/kube-prometheus-stack \
          --namespace monitoring \
          --create-namespace \
          --set grafana.enabled=true
          
    - name: Deploy Grafana dashboards
      run: |
        # Apply Grafana dashboard configurations
        kubectl apply -f monitoring/grafana-dashboards/ -n monitoring
        
    - name: Setup Azure Monitor
      run: |
        # Enable Azure Monitor for containers
        az aks enable-addons --addons monitoring --name ${{ env.AKS_CLUSTER_NAME }} --resource-group ${{ env.AKS_RESOURCE_GROUP }}

  # Cleanup old images
  cleanup:
    name: Cleanup Old Images
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Log in to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Cleanup old ACR images
      run: |
        # Keep only last 10 images
        az acr repository show-tags --name ${{ env.REGISTRY_NAME }} --repository ${{ env.IMAGE_NAME }} --orderby time_desc --output table | tail -n +11 | awk '{print $1}' | xargs -I {} az acr repository delete --name ${{ env.REGISTRY_NAME }} --image ${{ env.IMAGE_NAME }}:{} --yes 