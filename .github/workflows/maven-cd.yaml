name: Maven CD Pipeline

on:
  workflow_run:
    workflows: ["Maven CI Pipeline"]
    types:
      - completed
    branches: [ main, develop ]

jobs:
  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'develop' }}
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: 17
        distribution: 'temurin'
        cache: 'maven'
        
    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: maven-artifact
        path: target/
        
    - name: Build for staging
      run: mvn clean package -DskipTests -Pstaging
      
    - name: Deploy to staging environment
      run: |
        # Add your deployment commands here
        echo "Deploying to staging environment"
        # Example: scp target/*.jar user@staging-server:/app/
        # Example: docker build -t your-app:staging .
        # Example: docker push your-registry/your-app:staging
      env:
        STAGING_HOST: ${{ secrets.STAGING_HOST }}
        STAGING_USER: ${{ secrets.STAGING_USER }}
        STAGING_KEY: ${{ secrets.STAGING_KEY }}

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main' }}
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: 17
        distribution: 'temurin'
        cache: 'maven'
        
    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: maven-artifact
        path: target/
        
    - name: Build for production
      run: mvn clean package -DskipTests -Pproduction
      
    - name: Create release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        draft: false
        prerelease: false
        
    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./target/*.jar
        asset_name: application.jar
        asset_content_type: application/java-archive
        
    - name: Deploy to production environment
      run: |
        # Add your deployment commands here
        echo "Deploying to production environment"
        # Example: scp target/*.jar user@prod-server:/app/
        # Example: docker build -t your-app:latest .
        # Example: docker push your-registry/your-app:latest
      env:
        PROD_HOST: ${{ secrets.PROD_HOST }}
        PROD_USER: ${{ secrets.PROD_USER }}
        PROD_KEY: ${{ secrets.PROD_KEY }}

  # Deploy to Docker Registry
  deploy-docker:
    name: Deploy to Docker Registry
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' && (github.event.workflow_run.head_branch == 'main' || github.event.workflow_run.head_branch == 'develop') }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          your-registry/your-app:${{ github.sha }}
          your-registry/your-app:${{ github.event.workflow_run.head_branch == 'main' && 'latest' || 'staging' }}
        cache-from: type=gha
        cache-to: type=gha,mode=max 